using System;

namespace moreLogic
{
    class Program
    {
        static void Main(string[] args)
        {
            
            /* 
            ==

             Сравнивает два операнда на равенство. Если они равны, то операция возвращает true, если не равны, то возвращается false:
            
            int a = 10;
            int b = 4;
            bool c = a == b; // false
            
            !=

            Сравнивает два операнда и возвращает true, если операнды не равны, и false, если они равны.

            
            int a2 = 10;
            int b2 = 4;
            bool c2 = a2 != b2;    // true
            bool d2 = a2 != 10;     // false
            
<

Операция "меньше чем".Возвращает true, если первый операнд меньше второго, и false, если первый операнд больше второго:

            
            int a3 = 10;
            int b3 = 4;
            bool c3 = a3 < b3; // false
            
>

Операция "больше чем".Сравнивает два операнда и возвращает true, если первый операнд больше второго, иначе возвращает false:
            
            int a4 = 10;
            int b4 = 4;
            bool c4 = a4 > b4;     // true
            bool d4 = a4 > 25;    // false
            
            <=

            Операция "меньше или равно".Сравнивает два операнда и возвращает true, если первый операнд меньше или равен второму.Иначе возвращает false.
            
            int a5 = 10;
            int b5 = 4;
            bool c5 = a5 <= b5;     // false
            bool d5 = a5 <= 25;    // true
            
>=

Операция "больше или равно".Сравнивает два операнда и возвращает true, если первый операнд больше или равен второму, иначе возвращается false:
            
            int a6 = 10;
            int b6 = 4;
            bool c6 = a6 >= b6;     // true
            bool d6 = a6 >= 25;    // false
              |

Операция логического сложения или логическое ИЛИ.Возвращает true, если хотя бы один из операндов возвращает true.


            bool x1 = (5 > 6) | (4 < 6); // 5 > 6 - false, 4 < 6 - true, поэтому возвращается true
            bool x2 = (5 > 6) | (4 > 6); // 5 > 6 - false, 4 > 6 - false, поэтому возвращается false
             &

            Операция логического умножения или логическое И.Возвращает true, если оба операнда одновременно равны true.
 
            bool x3 = (5 > 6) & (4 < 6); // 5 > 6 - false, 4 < 6 - true, поэтому возвращается false
            bool x4 = (5 < 6) & (4 < 6); // 5 < 6 - true, 4 < 6 - true, поэтому возвращается true
              ||

Операция логического сложения. Возвращает true, если хотя бы один из операндов возвращает true.


            bool x5 = (5 > 6) || (4 < 6); // 5 > 6 - false, 4 < 6 - true, поэтому возвращается true
            bool x6 = (5 > 6) || (4 > 6); // 5 > 6 - false, 4 > 6 - false, поэтому возвращается false
              &&

Операция логического умножения. Возвращает true, если оба операнда одновременно равны true.


            bool x7 = (5 > 6) && (4 < 6); // 5 > 6 - false, 4 < 6 - true, поэтому возвращается false
            bool x8 = (5 < 6) && (4 < 6); // 5 < 6 - true, 4 < 6 - true, поэтому возвращается true
             !

            Операция логического отрицания. Производится над одним операндом и возвращает true, если операнд равен false.Если операнд равен true, то операция возвращает false:

            bool a8 = true;
            bool b8 = !a8;    // false
              ^
            Операция исключающего ИЛИ. Возвращает true, если либо первый, либо второй операнд(но не одновременно) равны true, иначе возвращает false

            bool x9 = (5 > 6) ^ (4 < 6); // 5 > 6 - false, 4 < 6 - true, поэтому возвращается true
            bool x10 = (50 > 6) ^ (4 / 2 < 3); // 50 > 6 - true, 4/2 < 3 - true, поэтому возвращается false
            
             * Здесь у нас две пары операций | и || (а также & и &&) выполняют похожие действия, однако же они не равнозначны.

В выражении z = x | y; будут вычисляться оба значения -x и y.

В выражении же z = x || y; сначала будет вычисляться значение x, и если оно равно true, то вычисление значения y уже смысла не имеет, так как у нас в любом случае уже z будет равно true.Значение y будет вычисляться только в том случае, если x равно false

То же самое касается пары операций &/&&.В выражении z = x & y; будут вычисляться оба значения -x и y.

В выражении же z = x && y; сначала будет вычисляться значение x, и если оно равно false, то вычисление значения y уже смысла не имеет, так как у нас в любом случае уже z будет равно false.Значение y будет вычисляться только в том случае, если x равно true

Поэтому операции || и && более удобны в вычислениях, так как позволяют сократить время на вычисление значения выражения, и тем самым повышают производительность.А операции | и & больше подходят для выполнения поразрядных операций над числами.
            */
        }
    }
}
